call plug#begin('~/.config/nvim/plugged')
" Plug 'kopischke/vim-stay' " This isn't working properly for some reason
" Plug 'vim-syntastic/syntastic'
Plug 'arcticicestudio/nord-vim'
Plug 'altercation/vim-colors-solarized'
Plug 'chrisbra/csv.vim'
Plug 'christoomey/vim-tmux-navigator'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'dag/vim-fish'
Plug 'fs111/pydoc.vim'
Plug 'itchyny/lightline.vim'
Plug 'jalvesaq/Nvim-R'
Plug 'jeffkreeftmeijer/vim-dim'
Plug 'jeffkreeftmeijer/vim-numbertoggle'
Plug 'jiangmiao/auto-pairs'
Plug 'kana/vim-submode'
Plug 'kchmck/vim-coffee-script'
Plug 'Konfekt/FastFold'
Plug 'lervag/vimtex'
Plug 'mpjuers/showcontext'
Plug 'python/black'
Plug 'Shougo/neosnippet-snippets'
Plug 'Shougo/neosnippet.vim'
Plug 'tacahiroy/ctrlp-funky'
Plug 'tmhedberg/SimpylFold'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-vinegar'
Plug 'vim-voom/VOoM'
Plug 'Vimjas/vim-python-pep8-indent'
Plug 'wesQ3/vim-windowswap'
Plug 'w0rp/ale'
Plug 'Yggdroot/indentLine'
Plug 'zchee/deoplete-jedi'
if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'roxma/vim-hug-neovim-rpc'
  Plug 'roxma/nvim-yarp'
  Plug 'Shougo/deoplete.nvim'
endif
call plug#end()

let g:python3_host_prog = "$HOME/.pyenv/versions/neovim3/bin/python"
let g:python_host_prog = "$HOME/.pyenv/versions/neovim2/bin/python"

" Press F4 to toggle highlighting on/off, and show current value.
noremap <F4> :set hlsearch! hlsearch?<CR>	


" for automatic reloading of changed files
autocmd FocusGained,BufEnter * :silent! !
autocmd FocusLost,WinLeave * :silent! noautocmd w


" automatically set working directory to current file

autocmd BufEnter * silent! lcd %:p:h

nnoremap <silent> <C-n> :set relativenumber!<cr>

" go row-wise rather than line-wise
nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k

" popup menu for spelling
nnoremap z= ea<C-X><C-S>

" window
" new window takes up entire width/height of screen
nmap <silent> <leader>swh  :topleft  vnew<CR>
nmap <silent> <leader>swl :botright vnew<CR>
nmap <silent> <leader>swk    :topleft  new<CR>
nmap <silent> <leader>swj  :botright new<CR>

" buffer
" new window takes up half of current window width/height
nmap <silent> <leader>sh   :leftabove  vnew<CR>
nmap <silent> <leader>sl  :rightbelow vnew<CR>
nmap <silent> <leader>sk     :leftabove  new<CR>
nmap <silent> <leader>sj   :rightbelow new<CR>

" move from terminal mode
tnoremap <C-h> <C-\><C-n><C-w>h
tnoremap <C-j> <C-\><C-n><C-w>j
tnoremap <C-k> <C-\><C-n><C-w>k
tnoremap <C-l> <C-\><C-n><C-w>l

" insert newline after and before enclosing braces
nmap <expr> <leader>(( getline(".")[col(".")-1] == "(" ? 'a<CR><esc>?(<CR>%i<CR><esc>' : ''


noremap <silent> <F3> :w !detex \| wc -w<CR>
" show open buffers with f5
noremap <silent> <F5> :buffers<CR>:buffer<Space>
" open term window
noremap <silent> <leader>tj :belowright new \| resize 15 \| set wfh \| term<CR> 
noremap <silent> <leader>twj :botright new \| resize 15 \| set wfh \| term<CR>
noremap <silent> <leader>twl :botright vnew \| vertical resize 80 \| set wfw \| term<CR>

let w:locallist_open = 0
function! Toggle_locallist()
    if w:locallist_open == 0
        let w:locallist_open = 1
        lopen
        wincmd p
    else
        let w:locallist_open = 0
        lclose
    endif
endfunction
nnoremap <leader>lo :call Toggle_locallist()<CR>

command! WQtab wincmd j | w | windo bd
command! Qtab windo bd
function! PythonAddTags(module)
    let l:commandstring = "python -c \"import os; import " . a:module 
                \ . "; print(os.path.dirname(" . a:module . "\.__file__))\""
    let l:dir = system(l:commandstring)[:-2]
    let l:call = "ctags -R " . l:dir
    call system(l:call)
    let &tags .= "\ " . l:dir . "/tags"
endfunction
command! -nargs=1 Addtags call PythonAddTags(<f-args>)

" latex to docx
map <F8> :w !pandoc -o %.docx <CR>

" for completion menu
inoremap <expr><CR> pumvisible() ? "\<C-y>" : "\<C-g>u<CR>"
inoremap <expr> <C-n> pumvisible() ? '<C-n>' :
  \ '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'
" inoremap <expr> <M-,> pumvisible() ? '<C-n>' :
"   \ '<C-x><C-o><C-n><C-p><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'

nnoremap <leader>lc :call ShowContext_toggle()<CR>

let g:black_running = 0
function! Toggle_black_running()
    if g:black_running == 0
        let g:black_running = 1
        augroup BlackRunning
            autocmd!
            autocmd! BufWritePre *.py execute ':Black'
        augroup END
		echo 'Black on'
    else
        let g:black_running = 0
        autocmd! BlackRunning
		echo 'Black off'
    endif
endfunction
nnoremap <leader>bl :call Toggle_black_running()<CR>

" CtrlP-funky
nnoremap <C-f> :CtrlPFunky<Cr>
" Ctrl-] uses ctags if available, otherwise CtrlP-Funky
function! GoTo()
    try
        execute "ma T"
        execute "tag " . expand("<cword>")
    catch
        execute "CtrlPFunky " . expand("<cword>")
    endtry
endfunction

let g:ctrlp_funky_after_jump = 'zvzz'
let g:ctrlp_funky_use_cache = 1
let g:ctrlp_funky_multi_buffers = 1
nnoremap <C-]> :call GoTo()<CR>

" CtrlP

let g:ctrlp_use_caching = 0
if executable('ag')
    set grepprg=ag\ --nogroup\ --nocolor

    let g:ctrlp_user_command = 'ag --literal --files-with-matches --nocolor
                \ --hidden --follow --nocolor -g "" %s'
else
    let g:ctrlp_user_command = ['.git', 
                \ 'cd %s && git ls-files . -co --exclude-standard',
                \ 'find %s -type f']
    let g:ctrlp_prompt_mappings = {
                \ 'AcceptSelection("e")': ['<space>', '<cr>', '<2-LeftMouse>'],
                \ }
endif

let g:ctrlp_map = '<C-p>' 
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_follow_symlinks = 1
" find .git and set to working directory
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_show_hidden = 1
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }
let g:ctrlp_by_filename = 1
noremap <leader>bu :CtrlPBuffer<CR>

"" Ultisnips setup
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
" let g:UltiSnipsExpandTrigger='<Tab>'
" let g:UltiSnipsJumpForwardTrigger='<c-j>'
" let g:UltiSnipsJumpBackwardTrigger='<c-k>'
" let g:UltiSnipsSnippetsDir="~/.config/nvim/ultisnips/snippets"

" If you want :UltiSnipsEdit to split your window.
" let g:UltiSnipsEditSplit="horizontal"
" let g:UltiSnipsEnableSnipMate=1
""end ultisnips stuff


" submode
" A message will appear in the message line when you're in a submode
" " and stay there until the mode has existed.
let g:submode_always_show_submode = 1
"
" " We're taking over the default <C-w> setting. Don't worry we'll do
" " our best to put back the default functionality.
call submode#enter_with('window', 'n', '', '<C-w>')
call submode#enter_with('scroll', 'n', '', 's')
"
" Note: <C-c> will also get you out to the mode without this mapping.
" Note: <C-[> also behaves as <ESC>
call submode#leave_with('window', 'n', '', '<ESC>')
call submode#leave_with('scroll', 'n', '', '<ESC>')
"
" Go through every letter
for key in ['a','b','c','d','e','f','g','h','i','j','k','l','m',
            \'n','o','p','q','r','s','t','u','v','w','x','y','z']
    " maps lowercase, uppercase and <C-key>
    call submode#map('window', 'n', '', key, '<C-w>' . key)
    call submode#map('window', 'n', '', toupper(key), '<C-w>' . toupper(key))
    call submode#map('window', 'n', '', '<C-' . key . '>', '<C-w>' . '<C-'.key . '>')
endfor

" scroll bindings, make hjkl scroll half window
call submode#map('scroll', 'n', '', 'h', 'zH')
call submode#map('scroll', 'n', '', 'l', 'zL')
call submode#map('scroll', 'n', '', 'j', '<C-d>')
call submode#map('scroll', 'n', '', 'k', '<C-u>')

" Go through symbols. Sadly, '|', not supported in submode plugin.
for key in ['=','_','+','-','<','>']
    call submode#map('window', 'n', '', key, '<C-w>' . key)
endfor
"
" Old way, just in case.
nnoremap <Leader>w <C-w>


" vimtex
let g:tex_flavor = 'latex'
let g:vimtex_latexmk_progname = 'nvr'
let g:vimtex_compiler_latexmk = {
            \ 'build_dir' : 'Build'
            \}
let g:vimtex_index_show_help = 0
let g:vimtex_toc_fold = 1

" for Skim
let g:vimtex_view_general_viewer
            \ = '/Applications/Skim.app/Contents/SharedSupport/displayline'
let g:vimtex_view_general_options = '-r @line @pdf @tex'

" This adds a callback hook that updates Skim after compilation
let g:vimtex_latexmk_callback_hooks = ['UpdateSkim']
function! UpdateSkim(status)
    if !a:status | return | endif
    let l:out = b:vimtex.out()
    let l:tex = expand('%:p')
    let l:cmd = [g:vimtex_view_general_viewer, '-r']
    if !empty(system('pgrep Skim'))
        call extend(l:cmd, ['-g'])
    endif
    if has('nvim')
        call jobstart(l:cmd + [line('.'), l:out, l:tex])
    elseif has('job')
        call job_start(l:cmd + [line('.'), l:out, l:tex])
    else
        call system(join(l:cmd + [line('.'), shellescape(l:out), shellescape(l:tex)], ' '))
    endif
endfunction


" nvim-r options
let R_tmpdir = "/tmp/R_tmp"
let R_rconsole_width = 0

" syntastic
" if &diff == 0
"     set statusline+=%#warningmsg#
"     set statusline+=%{SyntasticStatuslineFlag()}
"     set statusline+=%*

"     let g:syntastic_always_populate_loc_list = 1
"     let g:syntastic_auto_loc_list = 1
"     let g:syntastic_check_on_open = 1
"     let g:syntastic_check_on_wq = 0
" endif

" ale
let g:ale_open_list = 0
let g:ale_lint_on_text_changed = 1
let g:ale_lint_on_save = 1
let g:ale_fixers = {'python': ['autopep8']} 
" close locallist on buffer exit
augroup CloseLoclistWindowGroup
    autocmd!
    autocmd QuitPre * if empty(&buftype) | lclose | endif
augroup END

" pyenv
let g:python_host_prog = '/Users/mpjuers/.pyenv/versions/neovim2/bin/python'
let g:python3_host_prog = '/Users/mpjuers/.pyenv/versions/neovim3/bin/python'

" deoplete
let g:deoplete#enable_at_startup = 1
if !exists('g:deoplete#omni#input_patterns')
    let g:deoplete#omni#input_patterns = {}
endif
autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif
call deoplete#custom#option('auto_complete', 1)
if !exists('g:deoplete#omni#input_patterns')
    let g:deoplete#omni#input_patterns = {}
endif
autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif
augroup omnifuncs
    autocmd!
    autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
augroup end

" jedi-vim
let g:jedi#completions_enabled = 0

" vim-python-pep8-indent
let python_pep8_indent_hang_closing = 0

" neosnippet
let g:neosnippet#enable_completed_snippet = 1
autocmd CompleteDone * call neosnippet#complete_done()
imap <c-j>  <Plug>(neosnippet_expand_or_jump)
smap <c-j>  <Plug>(neosnippet_expand_or_jump)
xmap <c-j>  <Plug>(neosnippet_expand_target)
" For conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif

" vimtex
let g:vimtex_compiler_progname = 'nvr'


" nvim-r
let R_latexmk = 0
let R_latexcmd=['latexmk',  '-pdf', '-pdflatex="pdflatex -file-line-error - synctex=1"', '-jobname=./build/% -pdf']
let R_console_height = 15
let R_objbr_w = 30
let vimrplugin_rnowebchunk = 0
let R_esc_term = 0
let R_nvimpager = "horizontal"
" set skim to pdf viewer
let r_pdfviewer = "skim"
let r_show_args = 1
let r_openpdf = 1
let r_openhtml = 1
let r_indent_align_args = 0
let r_indent_ess_compatible = 0
let r_indent_ess_comment = 0
" nvim-R bindings
nmap <LocalLeader>md <Plug>RMakeRmd  

" send selection to R with space bar
vmap <Space> <Plug>RDSendSelection 
" nmap <localleader>kr <Plug>RMakeRmd
" send line to R with space bar
nmap <Space> <Plug>RDSendLine


" AutoPairs
let g:AutoPairs={'(':')', '[':']', '{':'}',"'":"'",'"':'"'}

" Voom
" word count
noremap <leader>vl :Voom latex <CR>

" Airline
let g:airline_theme='solarized'
let g:airline#extensions#ale#enabled = 1

" Fugitive
" Prevent opening of new tab with :Git command.
let g:fugitive_force_bang_command = 1

" Black
let g:black_linelength = 79

" IndentLine
let g:indentLine_enabled = 0

" lightline
let g:lightline = {
      \ 'colorscheme': 'nord',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'fugitive#head'
      \ },
      \ }
augroup vimrc
    autocmd!
    autocmd FileType rmd setlocal omnifunc=CompleteR
    autocmd FileType make setlocal noexpandtab
    autocmd FileType rmd setlocal commentstring=#%s
    autocmd FileType cpp setlocal commentstring=//%s
    autocmd FileType tex setlocal spell spelllang=en_us
    autocmd FileType py nnoremap K :execute "!pydoc " . expand("")
    " fix misbehavior after buffer deletion
    " unfortunately this seems to break help
    " autocmd BufDelete * tabdo windo wincmd + | wincmd >
    autocmd BufEnter term://* wincmd + | wincmd - | wincmd < | wincmd >
augroup END

" " netrw: follow symlink and set working directory
" autocmd CursorMoved silent *
" " short circuit for non-netrw files
"             \ if expand('%:p') !~# '\.git'
"             \ if &filetype == 'netrw' |
"                 \ call FollowSymlink() |
"                 \ call SetProjectRoot() |
"             \ endif
" automatically follow symlinks

" Follow symlinked files
function! FollowSymlink()
    let current_file = expand('%:p')
    " check if file type is a symlink
    if getftype(current_file) == 'link'
        " if it is a symlink resolve to the actual file path
        "   and open the actual file
        let actual_file = resolve(current_file)
        silent! execute 'file ' . actual_file
    end
endfunction

" set working directory to git project root
" or directory of current file if not git project
function! SetProjectRoot()
    " default to the current file's directory
    lcd %:p:h
    let git_dir = system("git rev-parse --show-toplevel")
    " See if the command output starts with 'fatal' (if it does, not in a git repo)
    let is_not_git_dir = matchstr(git_dir, '^fatal:.*')
    " if git project, change local directory to git project root
    if empty(is_not_git_dir)
        lcd `=git_dir`
    endif
endfunction

" follow symlink and set working directory
augroup Symlink
    autocmd!
    autocmd BufRead *
                \ if expand('%:p') !~# '\.git' |
                \ call FollowSymlink() |
                \ call SetProjectRoot()
augroup END

autocmd FileType crontab setlocal nobackup nowritebackup

augroup Snakemake
    autocmd!
    au BufNewFile,BufRead Snakefile set syntax=snakemake
    au BufNewFile,BufRead *.snake set syntax=snakemake
augroup END

function! SetTags(file)
    if filereadable(a:file)
        let &tags = " " . a:file . ";" . $HOME
    elseif filereadable("./tags")
        let &tags = " ./tags" . ";" . $HOME
    else
        return 0
    endif
endfunction

augroup Tags
    autocmd!
    autocmd VimEnter * call SetTags(trim(system("git rev-parse --show-toplevel")) . "/.tags")
    autocmd DirChanged * call SetTags(trim(system("git rev-parse --show-toplevel")) . "/.tags")
augroup END
